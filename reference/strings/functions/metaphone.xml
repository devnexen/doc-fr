<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 873f4a3d5027bd1b584f1d1e590e22cd4a08ae84 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.metaphone" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>metaphone</refname>
  <refpurpose>Calcule la clé metaphone</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>metaphone</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>max_phonemes</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Calcule la clé metaphone de <parameter>string</parameter>.
  </para>
  <para>
   <function>metaphone</function> est similaire à la fonction
   <function>soundex</function> : elle créée une clé similaire
   pour des mots dont la prononciation est proche. C'est une
   fonction qui est plus précise que <function>soundex</function>
   car elle prend en compte la prononciation anglaise. La clé
   metaphone générée est de taille variable.
  </para>
  <para>
   Metaphone a été développée par Lawrence Philips
   &lt;lphilips at verity dot com&gt;. Cette méthode est décrite
   dans le livre <literal>["Practical Algorithms for Programmers",
    Binstock &amp; Rex, Addison Wesley, 1995]</literal>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaîne d'entrée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>max_phonemes</parameter></term>
     <listitem>
      <para>
       Ce paramètre restreint la clé métaphone retournée à une longueur de
       <parameter>max_phonemes</parameter> <emphasis>caractères</emphasis>.
       Cependant, les phonèmes résultant sont toujours transcrit complètement,
       donc la longueur de la chaîne résultant peut être légèrement plus longue
       que <parameter>max_phonemes</parameter>.
       La valeur par défaut est <literal>0</literal>, ce qui
       signifie qu'aucune limitation ne sera appliquée.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la clé metaphone, sous la forme d'une &string;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Cette fonction retournait &false; en cas d'échec.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="metaphone.example.basic"><!-- {{{ -->
    <title>Exemple avec <function>metaphone</function></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(metaphone('programming'));
var_dump(metaphone('programmer'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(7) "PRKRMNK"
string(6) "PRKRMR"
]]>
    </screen>
   </example><!-- }}} -->
  </para>
  <para>
   <example xml:id="metaphone.example.phonemes"><!-- {{{ -->
    <title>Utilisation du paramètre <parameter>max_phonemes</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(metaphone('programming', 5));
var_dump(metaphone('programmer', 5));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "PRKRM"
string(5) "PRKRM"
]]>
    </screen>
   </example><!-- }}} -->
  </para>
  <para>
   <example xml:id="metaphone.example.phonemes-overlong">
    <title>Utilisant le paramètre de <parameter>max_phonemes</parameter></title>
    <simpara>
     Dans cette exemple, <function>metaphone</function> est avisé de produire
     une chaîne de cinq caractères, mais ceci nécessiterai de séparer le
     phonème final (<literal>'x'</literal> est supposé d'être transcrit en
     <literal>'KS'</literal>), donc la fonction retourne une chaîne de six
     caractères.
    </simpara>
    <programlisting role="php">
     <![CDATA[
<?php
var_dump(metaphone('Asterix', 5));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     <![CDATA[
string(6) "ASTRKS"
]]>
    </screen>
   </example>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>levenshtein</function></member>
    <member><function>similar_text</function></member>
    <member><function>soundex</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
